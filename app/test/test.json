{
    "projectTitle": "Arweave Interaction Platform",
    "explanation": "This React application facilitates interaction with the Arweave network. It provides a user interface to connect wallets, manage processes, and send/receive messages through Arweave transactions. The project is structured into modular components for navigation, process management, and message handling, styled with Tailwind CSS, and uses lucide-react icons for visual elements. It's designed to offer a comprehensive and user-friendly experience for engaging with Arweave and its ecosystem.",
    "files": {
        "/App.js": {
            "code": "import React, { useState, useEffect, createContext, useContext } from 'react';\nimport { Home, Settings, Mail, Plus, ArrowRight, Users, Upload, Download, Check, X, Trash } from 'lucide-react';\nimport { connectWallet, disconnectWallet, getWalletDetails, spawnProcess, messageAR, fetchMessagesAR } from './arweaveUtils';\nimport { formatDistanceToNow } from 'date-fns';\n\nconst AppContext = createContext();\n\nfunction App() {\n    const [walletAddress, setWalletAddress] = useState('');\n    const [balance, setBalance] = useState(0);\n    const [processes, setProcesses] = useState([]);\n    const [selectedProcess, setSelectedProcess] = useState(null);\n    const [messages, setMessages] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [newMessage, setNewMessage] = useState('');\n    const [showModal, setShowModal] = useState(false);\n    const [newProcessName, setNewProcessName] = useState('');\n    const [error, setError] = useState(null);\n    const [showSettings, setShowSettings] = useState(false);\n    const [showMessages, setShowMessages] = useState(false);\n\n\n    const providerValues = {\n      walletAddress, setWalletAddress, balance, setBalance, processes, setProcesses, selectedProcess, setSelectedProcess, messages, setMessages, loading, setLoading, newMessage, setNewMessage, showModal, setShowModal, newProcessName, setNewProcessName, error, setError, showSettings, setShowSettings, showMessages, setShowMessages \n    }\n    return(\n     <AppContext.Provider value={providerValues}>\n     <div className=\"min-h-screen bg-gray-100\">\n        <Navbar />\n        <main className=\"container mx-auto px-4 py-8\">\n          <div className='flex flex-col md:flex-row'>\n            <Sidebar/>\n            <MainContent />\n          
  </div>\n        </main>\n        <NewProcessModal />\n        <SettingsModal />\n        </div>\n      </AppContext.Provider>\n    );\n
        }\n\nconst useAppState = () => {\n  return useContext(AppContext);\n
        }\n\n\nfunction Navbar() {\n const { walletAddress
            } = useAppState();\n  return (\n      <nav className=\"bg-gradient-to-r from-blue-500 to-purple-600 p-4 text-white flex justify-between items-center\">\n          <span className=\"font-bold text-xl\">Arweave Project Hub ðŸš€</span>\n          <div>\n           {walletAddress ? ( <div className=\"flex items-center gap-2\">\n          
          <span className='text-sm'>{walletAddress.slice(0,
                6)
            }...{walletAddress.slice(-4)
            }</span>\n                <button className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\" onClick={handleDisconnect}>Disconnect</button></div>) : <button className=\"bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded\" onClick={handleConnect}>Connect Wallet</button>}\n          </div>\n      </nav>\n  );\n}\n\nfunction Sidebar() {\n const { processes, selectedProcess, setSelectedProcess, showSettings, setShowSettings, setShowMessages } = useAppState();\n const toggleSettings = () => setShowSettings(!showSettings)\n const toggleMessages = () => setShowMessages(!showMessages)\n\n  return (\n    <aside className=\"md:w-1/4 bg-gray-200 p-4 flex flex-col border-r\">\n       <button onClick={toggleMessages} className={`flex items-center gap-2 py-2 px-4 rounded-md hover:bg-gray-300  ${showMessages ? 'bg-gray-300' : ''}`} > <Mail className='h-4 w-4'/> Messages</button>\n       <button onClick={toggleSettings} className={`flex items-center gap-2 py-2 px-4 rounded-md hover:bg-gray-300  ${showSettings ? 'bg-gray-300' : ''}`} > <Settings className='h-4 w-4'/> Settings</button>\n        <h3 className=\"text-lg font-semibold mb-2 mt-4\">Processes</h3>\n      {processes.map((process, index) => (\n         
  <button key={index
            } onClick={()=>setSelectedProcess(process)
            } className={`w-full text-left p-2 rounded-md hover:bg-gray-300 ${selectedProcess === process ? 'bg-gray-300' : ''
                }`
            }>\n           {process.slice(0,
                6)
            }...{process.slice(-4)
            }\n         </button>\n       ))
        }\n     <button onClick={handleOpenModal
        } className=\"mt-4 bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded flex items-center gap-2\">\n        <Plus className='h-4 w-4'/> New Process\n      </button>\n    </aside>\n  );\n}\n\n\nfunction MainContent() {\n const { selectedProcess, messages, loading, newMessage, setNewMessage, error } = useAppState();\n\n    const handleSendMessage = async () => {\n        if (newMessage.trim() === '') return;\n        try {\n          setLoading(true);\n          await messageAR({ data: newMessage, process: selectedProcess });\n          setNewMessage('');\n         await handleFetchMessages(selectedProcess);\n\n        } catch (err) {\n            console.error(\"Error sending message\", err);\n            setError('Error sending message')\n        } finally {\n            setLoading(false);\n        }\n    };\n\n  if (!selectedProcess) {\n    return <div className=\"flex-1 p-4 text-center text-gray-600\"> <img src=\"https://archive.org/download/placeholder-image/placeholder-image.jpg\" alt=\"placeholder\" className='mx-auto h-32 w-32 mb-4'/> Select a process to view details.</div>;\n  }\n\n  return (\n      <div className=\"flex-1 p-4\">\n       <h2 className=\"text-xl font-semibold mb-4\">Process ID: {selectedProcess.slice(0, 8)}...{selectedProcess.slice(-8)} </h2>\n        <div className=\"mb-4\">\n         <div className='flex gap-4'>\n           <input\n               type=\"text\"\n               placeholder=\"Type your message...\"\n               value={newMessage}\n               onChange={(e) => setNewMessage(e.target.value)}\n               className=\"border p-2 w-full rounded-md text-black\"\n           />\n           <button onClick={handleSendMessage} className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\" disabled={loading}> {loading ? 'Sending...' : 'Send'}</button>\n           </div>\n           {error && <div className='text-red-500 mt-2'>{error}</div>}\n       </div>\n          <div className='overflow-y-auto h-[60vh] border rounded-md p-4'>\n              {messages.map((msg, index) => (\n                  <div key={index} className=\"bg-gray-100 p-3 rounded-md mb-2\">\n                      <div className=\"flex justify-between items-center mb-1\">\n                          <span className=\"font-semibold text-sm\">{msg.owner.slice(0, 6)}...{msg.owner.slice(-4)}</span>\n                          <span className=\"text-gray-500 text-xs\">{formatDistanceToNow(new Date(msg.ingested_at * 1000), { addSuffix: true })}</span>\n                      
  </div>\n                      <p className=\"text-gray-700\">{msg.data}</p>\n                  </div>\n              ))}\n        </div>\n      </div>\n  );\n}\n\nfunction NewProcessModal() {\n const { showModal, setShowModal, newProcessName, setNewProcessName, setLoading, setProcesses, processes, setError } = useAppState();\n\n    const handleCreateProcess = async () => {\n      if (!newProcessName.trim()) return;\n        try {\n            setLoading(true);\n            const processId = await spawnProcess(newProcessName);\n            setProcesses([...processes, processId]);\n            setShowModal(false);\n         
     setNewProcessName('');\n
    } catch (err) {\n            console.error(\"Error creating process:\", err);\n            
  setError('Error creating process.')\n
    } finally {\n            setLoading(false);\n
    }\n
};\n\n    const handleCloseModal = () => {\n        setShowModal(false);\n        setNewProcessName('');\n
};\n\n  return (\n      showModal && (\n        <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex items-center justify-center\">\n          <div className=\"bg-white p-5 rounded-md max-w-md w-full\">\n            <h2 className=\"text-xl font-semibold mb-4\">Create New Process</h2>\n            <input\n              type=\"text\"\n              placeholder=\"Process Name\"\n              value={newProcessName}\n              onChange={(e) => setNewProcessName(e.target.value)}\n              className=\"border p-2 w-full mb-4 rounded-md text-black\"\n            />\n            {error && <div className='text-red-500 mb-2'>{error
    }</div>
}\n            <div className=\"flex justify-end gap-2\">\n            <button onClick={handleCloseModal} className=\"bg-gray-400 hover:bg-gray-500 text-white font-bold py-2 px-4 rounded\">Cancel</button>\n            <button onClick={handleCreateProcess} className=\"bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded\">{loading ? 'Creating...' : 'Create'}</button>\n          </div>\n      </div>\n     </div>\n    )\n  );\n}\n\nfunction SettingsModal() {\n  const {showSettings, setShowSettings, walletAddress, balance} = useAppState()\n\n  const handleCloseSettings = () => {\n      setShowSettings(false);\n  };\n  return (\n      showSettings && (\n          <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex items-center justify-center\">\n            <div className=\"bg-white p-5 rounded-md max-w-md w-full\">\n              <h2 className=\"text-xl font-semibold mb-4\">Settings</h2>\n              <div className='mb-4'>\n                <p><span className='font-semibold'>Wallet Address:</span> {walletAddress ? walletAddress.slice(0, 8) + '...' + walletAddress.slice(-8) : 'Not connected'}</p>\n                <p><span className='font-semibold'>Balance:</span> {balance}</p>\n            </div>\n            <button onClick={handleCloseSettings} className=\"bg-gray-400 hover:bg-gray-500 text-white font-bold py-2 px-4 rounded\">Close</button>\n        </div>\n    </div>\n      )\n  )\n}\n\nasync function handleConnect() {\n const { setWalletAddress, setBalance } = useAppState();\n  try {\n    await connectWallet();\n    const { walletAddress, balance } = await getWalletDetails();\n    setWalletAddress(walletAddress);\n    setBalance(balance);\n } catch (error) {\n  console.error('Failed to connect wallet', error);\n }\n}\n\nasync function handleDisconnect() {\n const { setWalletAddress, setBalance, setProcesses, setSelectedProcess, setMessages } = useAppState();\n try {\n    await disconnectWallet();\n    setWalletAddress('');\n   setBalance(0);\n    setProcesses([]);\n   setSelectedProcess(null);\n   setMessages([])\n } catch (error) {\n  console.error('Failed to disconnect wallet', error);\n }\n}\n\n\nasync function handleFetchMessages(process) {\n const { setLoading, setMessages, setError } = useAppState();\n try {\n    setLoading(true);\n    const msgs = await fetchMessagesAR({ process });\n    setMessages(msgs);\n } catch (error) {\n    console.error('Error fetching messages', error);\n    setError('Error fetching messages')\n } finally {\n    setLoading(false);\n }\n}\n\nasync function handleOpenModal() {\n  const { setShowModal } = useAppState();\n  setShowModal(true)\n}\n\nuseEffect(() => {\n  const {setWalletAddress, setBalance} = useAppState()\n const checkWalletConnection = async () => {\n  if (window.arweaveWallet) {\n   try {\n      const walletAddress = await window.arweaveWallet.getActiveAddress();\n       const { balance } = await getWalletDetails();\n      setWalletAddress(walletAddress);\n     setBalance(balance)\n     } catch (error) {\n    console.log('wallet not connected', error)\n  }\n  }\n}\n  checkWalletConnection();\n}, []);\n\nuseEffect(() => {\n const { selectedProcess, setMessages } = useAppState();\n    if (selectedProcess) {\n        handleFetchMessages(selectedProcess)\n      setMessages([])\n    }\n}, [selectedProcess]);\n\nexport default App;",
},
"/arweaveUtils.js": {
"code": "// Arweave Documentation\nconst AOModule = \"Do_Uc2Sju_ffp6Ev0AnLVdPtot15rvMjP-a9VVaA5fM\"; // aos 2.0.1\nconst AOScheduler = \"_GQ33BkPtZrqxA84vM8Zk-N2aO0toNNu_C-l-rawrBA\";\nconst CommonTags = [\n { name: \"Name\", value: \"Anon\" },\n { name: \"Version\", value: \"0.2.1\" },\n { name: \"Authority\", value: \"fcoN_xJeisVsPXA-trzVAuIiqO3ydLQxM-L4XbrQKzY\" }\n];\n\nimport {\n spawn,\n message,\n createDataItemSigner\n} from \"@permaweb/aoconnect\"\nimport axios from 'axios';\n\n// fetch root process data\nconst baseData = {\n query: \"   query ($entityId: String!, $limit: Int!, $sortOrder: SortOrder!, $cursor: String) {\\n  transactions(\\n    sort: $sortOrder\\n    first: $limit\\n    after: $cursor\\n    recipients: [$entityId]\\n    ingested_at: {min: 1696107600}\\n  ) {\\n    count\\n    ...MessageFields\\n    __typename\\n  }\\n}\\nfragment MessageFields on TransactionConnection {\\n  edges {\\n    cursor\\n    node {\\n      id\\n      ingested_at\\n      recipient\\n      block {\\n        timestamp\\n        height\\n        __typename\\n      }\\n      tags {\\n        name\\n        value\\n        __typename\\n      }\\n      data {\\n        size\\n        __typename\\n      }\\n      owner {\\n        address\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n  __typename\\n}\",\n variables: {\n   cursor: \"\",\n   entityId: \"\",\n   limit: 25,\n   sortOrder: \"INGESTED_AT_DESC\"\n }\n};\n\n// nested message\nconst query1 = \" query ($id: ID!) {\\n   transactions(ids: [$id], ingested_at: {min: 1696107600}) {\\n     ...MessageFields\\n     __typename\\n   }\\n } fragment MessageFields on TransactionConnection {\\n   edges {\\n     cursor\\n     node {\\n       id\\n       ingested_at\\n       recipient\\n       block {\\n         timestamp\\n         height\\n         __typename\\n       }\\n       tags {\\n         name\\n         value\\n         __typename\\n       }\\n       data {\\n         size\\n         __typename\\n       }\\n       owner {\\n         address\\n         __typename\\n       }\\n       __typename\\n     }\\n     __typename\\n   }\\n   __typename\\n }\"\nconst variables1 = processId => ({\n id: processId\n})\n\n// connect wallet\nexport async function connectWallet() {\n try {\n   if (!window.arweaveWallet) {\n     alert('No Arconnect detected');\n     return;\n   }\n   await window.arweaveWallet.connect(\n     ['ACCESS_ADDRESS', 'SIGN_TRANSACTION', 'ACCESS_TOKENS'],\n     {\n       name: 'Anon',\n       logo: 'https://arweave.net/jAvd7Z1CBd8gVF2D6ESj7SMCCUYxDX_z3vpp5aHdaYk',\n     },\n     {\n       host: 'g8way.io',\n       port: 443,\n       protocol: 'https',\n     }\n   );\n } catch (error) {\n   console.error(error);\n } finally {\n   console.log('connection finished execution');\n }\n};\n\n// disconnect wallet\nexport async function disconnectWallet() {\n return await window.arweaveWallet.disconnect();\n};\n\n// get wallet details\nexport async function getWalletDetails() {\n const walletAddress = await window.arweaveWallet.getActiveAddress();\n const tokens = await window.arweaveWallet.userTokens();\n const tokenId = tokens[0].processId\n const balance = await window.arweaveWallet.tokenBalance(tokenId);\n return { walletAddress, balance };\n};\n\n\n// spawn process\nexport const spawnProcess = async (name, tags = []) => {\n try {\n   const allTags = [...CommonTags, ...tags];\n   if (name) {\n     allTags.push({ name: \"Name\", value: name });\n   }\n\n   const processId = await spawn({\n     module: AOModule,\n     scheduler: AOScheduler,\n     signer: createDataItemSigner(globalThis.arweaveWallet),\n     tags: allTags\n   });\n\n   return processId;\n } catch (error) {\n   console.error(\"Error spawning process:\", error);\n   throw error;\n }\n};\n\n// send message to process\nexport const messageAR = async ({ tags = [], data, anchor = '', process }) => {\n try {\n   if (!process) throw new Error(\"Process ID is required.\");\n   if (!data) throw new Error(\"Data is required.\");\n\n   const allTags = [...CommonTags, ...tags];\n   const messageId = await message({\n     data,\n     anchor,\n     process,\n     tags: allTags,\n     signer: createDataItemSigner(globalThis.arweaveWallet)\n   });\n   return messageId;\n } catch (error) {\n   console.error(\"Error sending message:\", error);\n   throw error;\n }\n};\n\n// utility function to fetch data using GraphQL\nasync function fetchGraphQL({ query, variables }) {\n const endpoint = 'https://arweave-search.goldsky.com/graphql';\n try {\n   const response = await axios.post(endpoint, {\n     query,\n     variables\n   });\n   return response.data;\n } catch (err) {\n   console.error(\"Error fetching data:\", err);\n   throw err;\n }\n}\n\n// fetch messages from arweave usign graphql\nexport const fetchMessagesAR = async ({ process }) => {\n try {\n   baseData.variables.entityId = process;\n   const messagesResponse = await fetchGraphQL({\n     query: baseData.query,\n     variables: baseData.variables\n   });\n\n   const messages = messagesResponse.data.transactions.edges.map(m => ({\n     id: m.node.id,\n     recipient: m.node.recipient,\n     tags: m.node.tags,\n     data: m.node.data,\n     owner: m.node.owner.address,\n     ingested_at: m.node.ingested_at\n   }));\n\n   const detailedMessages = await Promise.all(\n     messages.map(async m => {\n       try {\n         const res = await axios.get(\"https://arweave.net/\",m.id);\n         return { ...m, data: res.data }\n       } catch (error) {\n         console.error(\"Error fetching message\", error);\n         return null;\n       }\n     })\n   );\n   return detailedMessages.filter(m => m !== null);\n } catch (error) {\n   console.error(\"Error fetching messages:\", error);\n   throw error;\n }\n};",
}
},
"generatedFiles": [
"/App.js",
"/arweaveUtils.js"
]
}